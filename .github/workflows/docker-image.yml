name: CI/CD Pipeline


# Löst den Workflow bei Push oder Pull Request zum main-Branch ODER bei jedem Tag aus
on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Führt die Go-Tests aus
  test:
    runs-on: ubuntu-latest
    steps:
      # Schritt 1: Code aus dem Repository auschecken
      - name: Checkout code
        uses: actions/checkout@v4

      # Schritt 2: Go-Umgebung einrichten
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Schritt 3: Go-Module-Cache (mit Continue-on-Error für Cache-Probleme)
      - name: Cache Go modules
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Schritt 4: Linting mit golangci-lint (eigenes Caching deaktiviert)
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
          skip-cache: true

      # Schritt 5: Abhängigkeiten laden (vereinfacht für öffentliches Repo)
      - name: Tidy and download dependencies
        run: go mod tidy

      # Schritt 6: Unit-Tests mit Coverage ausführen
      - name: Run unit tests with coverage
        run: go test -v -cover ./...

      # Schritt 7: Integrationstests ausführen
      - name: Run integration tests
        run: go test -tags=integration -v ./internal/agent/

      # Schritt 8: Code Coverage Report generieren
      - name: Generate coverage report
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
          echo "Coverage report generated"

      # Schritt 9: Coverage-Report als Artifact hochladen
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Job 2: Baut das Docker-Image und lädt es hoch
  build-and-push:
    # Dieser Job läuft bei jedem Tag oder main-Push
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
